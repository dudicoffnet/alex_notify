import os
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID"))

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)

@router.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

@router.message(Command("ping"))
async def ping_handler(message: Message):
    await message.answer("üèì Pong!")


import requests

@router.message(Command("report"))


async def report_handler(message: Message):
    if message.from_user.id != OWNER_ID:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        response = requests.post("https://valik.ai/api/report", json={
            "questions": [
                "–í–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–ª—ë—Ç–∞ –∏–∑ –ú–∏–Ω—Å–∫–∞ –Ω–∞ –§—É–∫—É–æ–∫ —Å 5 –ø–æ 25 –Ω–æ—è–±—Ä—è (–Ω–∞ –¥–≤–æ–∏—Ö, 1 –ø–µ—Ä–µ—Å–∞–¥–∫–∞, –¥–æ 24 —á)",
                "–°–Ω–æ—Å/–∑–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ª–∏—Ü—ã –ú–∏—Ä–Ω–æ–π (—Ä–∞–π–æ–Ω: –î–æ–ª–≥–∏–Ω–æ–≤—Å–∫–∏–π, –°—Ç–∞—Ä–æ–≤–∏–ª–µ–Ω—Å–∫–∏–π, –ß–µ—Ä–≤—è–∫–æ–≤–∞, –ü—Ä–∏–≥–æ—Ä–æ–¥–Ω–∞—è)"
            ],
            "lang": "ru",
            "auth_token": "test_token_123"
        }, timeout=30)

        data = response.json()
        report = ""
        for q, a in data["answers"].items():
            report += f"‚ùì <b>{q}</b>\nüí¨ {a}\n\n"

        await message.answer(report[:4096])

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {str(e)}")

    if message.from_user.id != OWNER_ID:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    with open("payloads/daily_report.txt", "w", encoding="utf-8") as f:
        f.write("üìÑ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")
    file = FSInputFile("payloads/daily_report.txt")
    await message.answer_document(file, caption="üìÑ –¢–≤–æ–π –æ—Ç—á—ë—Ç")

@router.message(Command("sendzip"))
async def sendzip_handler(message: Message):
    if message.from_user.id != OWNER_ID:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    zip_path = "payloads/project_payload.zip"
    if not os.path.exists(zip_path):
        await message.answer("‚ö†Ô∏è –ê—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    file = FSInputFile(zip_path)
    await message.answer_document(file, caption="üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())